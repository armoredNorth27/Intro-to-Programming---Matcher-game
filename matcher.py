# Name: Alexander Nedev

import random
SIZE = 4
LEN = 2

''' Creates a 2D-list board of SIZE x SIZE.
With probability ~33% each cell of board 
stores a symbol from the set ($, #, *).
Finally returns the board. '''

def create_board(SIZE):
    board = []
    for _ in range(SIZE):
        row = []
        for _ in range(SIZE):
            if random.randint(1,10) > 7:
                row.append("$")
            elif random.randint(1,10) > 3:
                row.append("#")
            else:
                row.append("*")
        board.append(row)

    return board


## Add (and test) all required functions here ##
# ----------------------------------------------

#prints the 2D list into
#a board for the user to see
def print_board(board):

    show_coordinates(board)
    separator(board)

    #Nested for loops go through the rows and columns
    #that are generated by the create_board function
    #1st for loop controls the number of rows
    for row in range(len(board)):
        #2nd for loop controls the number of columns
        print(str(row) + "| ", end = "")

        for column in range(len(board)):
            print(board[row][column], end = "")

        print(" |" + str(row), end = "")
        print()
    
    separator(board)
    show_coordinates(board)

#Asks the user for the
#location of the row and
#column that they want
#to work with
def take_input():
    
    row = "row"
    column = "column"

    row = board_location_selection(row)
    column = board_location_selection(column)

    return row, column

#Checks if it's possible
#to make a match in the
#desired location
def check_matching(row, col, board):
    
    userScore = 1
    aboveMatchLength = 1
    belowMatchLength = 1
    leftMatchLength = 1
    rightMatchLength = 1
    #Finds the symbol at the selected location
    symbol = board[row][col]

    #Checks if the number of matched symbols 
    #above matches the required length
    for i in range(1, SIZE):
        if(row - i < 0):
            break
        
        aboveSymbol = board[row - i][col]

        if(aboveSymbol != symbol and i == 1):
            break

        if(aboveSymbol == symbol):
            aboveMatchLength += 1
        else:
            break

    #Checks if the number of matched symbols 
    #below matches the required length
    for i in range(1, SIZE):
        if(row + i > SIZE - 1):
            break
        
        belowSymbol = board[row + i][col]

        if(belowSymbol != symbol and i == 1):
            break

        if(belowSymbol == symbol):
            belowMatchLength += 1
        else:
            break

    #Checks if the number of matched symbols 
    #left matches the required length
    for i in range(1, SIZE):
        if(col - i < 0):
            break
        
        leftSymbol = board[row][col - i]

        if(leftSymbol != symbol and i == 1):
            break

        if(leftSymbol == symbol):
            leftMatchLength += 1
        else:
            break

    #Checks if the number of matched symbols 
    #right matches the required length
    for i in range(1, SIZE):
        if(col + i > SIZE - 1):
            break
        
        rightSymbol = board[row][col + i]

        if(rightSymbol != symbol and i == 1):
            break

        if(rightSymbol == symbol):
            rightMatchLength += 1
        else:
            break

    #if the amount of matched symbols matches the required length in either direction,
    #then update all matched symbols to a "."
    if(aboveMatchLength >= LEN
        or belowMatchLength >= LEN
        or leftMatchLength >= LEN
        or rightMatchLength >= LEN):
        #Checks vertical symbols above
        for i in range(1, SIZE):
            if(row - i < 0):
                break
            
            aboveSymbol = board[row - i][col]

            if(aboveSymbol != symbol and i == 1):
                break

            if(aboveSymbol == symbol):
                userScore += 1
                board[row - i][col] = "."
            else:
                break

        #Checks vertical symbols below
        for i in range(1, SIZE):
            if(row + i > SIZE - 1):
                break
            
            belowSymbol = board[row + i][col]

            if(belowSymbol != symbol and i == 1):
                break

            if(belowSymbol == symbol):
                userScore += 1
                board[row + i][col] = "."  
            else:
                break

        #Checks horizontal symbols left
        for i in range(1, SIZE):
            if(col - i < 0):
                break
            
            leftSymbol = board[row][col - i]

            if(leftSymbol != symbol and i == 1):
                break

            if(leftSymbol == symbol):
                userScore += 1
                board[row][col - i] = "." 
            else:
                break

        #Checks horizontal symbols right
        for i in range(1, SIZE):
            if(col + i > SIZE - 1):
                break
            
            rightSymbol = board[row][col + i]

            if(rightSymbol != symbol and i == 1):
                break

            if(rightSymbol == symbol):
                userScore += 1
                board[row][col + i] = "."
            else:
                break
        
        #returns information needed to inform
        #the user if their score has changed
        if(userScore == 1):
            return False, 0
        else:
            board[row][col] = "."
            return True, userScore
    
    else:
        return False, 0

#Checks if the board 
#has been cleared
def is_board_finished(board):
    
    #Nested for loops go through all the elements
    #within the 2D list.
    #First for loop goes through all rows
    for row in range(len(board)):
        #Second for loop goes through all columns
        for col in range(len(board)):
            #checks if all the symbols are "."
            #If even a single symbol isn't a "."
            #then it'll return false and exit the loop
            if board[row][col] == ".":
                continue
            else:
                return False
    
    #If it makes it through the entire list and all symbols are "."
    #then it will return true
    return True

#Asks the user for input and then verifies
#if that input is one of the three options
def gameplay_decision():

    choice = input("[M]atch the symbols, [C]hange the symbol, or [Q]uit the game?: ")
    while choice.upper() != "M" and choice.upper() != "C" and choice.upper() != "Q":
        print("Make sure you select one of the 3 options!")
        choice = input("[M]atch the symbols, [C]hange the symbol, or [Q]uit the game?: ")

    return choice

#Asks the user to enter the location with their desired character and
#makes sure the user's input is within the confines of the board
def board_location_selection(location):
    while True:
        try:
            #Asks for input
            result = int(input("Select the " + location + " that contains your desired symbol: "))
            #checks if the input is within the size of the board
            while(result > SIZE - 1 or result < 0):
                result = int(input("Invalid " + location + " on the board: "))
            break

        except ValueError:
            print("Please ensure you enter an integer input")
            print()
    
    return result

#Prints the separator between
#between the board and any
#outside elements
def separator(list):
    #Prints the separator
    for i in range(len(list) + 6):
        print("-", end = "")
    print()

#prints the numbers on top of
#to see the coordinate of your
#desired symbol
def show_coordinates(list):
    #Prints the numbers
    n = 0
    for i in range(len(list) + 6):
        if(i > 2 and i < (len(list) + 3)):
            print(0 + n, end = "")
            n += 1
        else:
            print(" ", end = "")
    print()

# ----------------------------------------------

#Runs the program and all the functions needed
#in order for the user to play the game
def main():

    #Prints the rules of the game
    print("""
                                *** Match the Symbols ***
    Rules:
        ** Find a horizontal/vertical line of length at least 2 consisting of the same
        symbols.
        -- Select 'M'/'m' to enter the position 'row/col' of the starting symbol of that
        line.
        -- Score 1 point for each symbol on that line.
        -- Also score points for all horizontal/vertical neighbours (symbols identical to
        point at 'row/col').
        ** Can't find a matching line and want to change an existing symbol?
        -- Select 'C'/'c' to enter the new symbol, but you will lose 2 points each time.
        -- If you can finish the board you'll get 10 additional points.
        ** You can quit anytime by selecting 'Q'/'q'.
    """)

    #keeps track of the user's score
    #obtained by the matches symbols
    userScore = 0
    #keeps track of the total score
    currentScore = 0
    #Keeps track of the previous score before
    #the newly matched symbols in order to know
    #how many symbols have been matched this round
    oldScore = 0
    #used to inform the user of how many symbols
    #have been matched
    matchedSymbols = 0
    boardClear = False

    #Creates and shows the board for the first time
    board = create_board(SIZE)
    print_board(board)

    command = gameplay_decision()

    #Entire while loops controls most of the game.
    #Depending on the user input, it'll either
    #check to try and match symbols or change
    #symbols or quit
    while command.upper() != "Q":
        #Checks to see if a match can be made
        if command.upper() == "M":
            #Ensures that the user doesn't select an already
            #completed space
            row, column = take_input()
            while board[row][column] == ".":
                print("Make sure you select a location that hasn't been completed yet!")
                print()
                row, column = take_input()
            match, userScore = check_matching(row, column, board)
            currentScore += userScore
            matchedSymbols = currentScore - oldScore
            oldScore = currentScore

            #If the match is possible, then print the result of that match
            if match == True:
                print("You successfully matched " + str(matchedSymbols) + " symbols")
                print("Your new score: " + str(currentScore))
            
            elif match == False:
                print("You cannot make a match here!")
        
        #Changes a symbol
        elif command.upper() == "C":
            #Ensures that the user doesn't select an already
            #completed space
            row, column = take_input()
            while board[row][column] == ".":
                print("Make sure you select a location that hasn't been completed yet!")
                print()
                row, column = take_input()

            #Asks the user what their newly desired
            #symbol is and verifies to ensure it's
            #one of the 3 symbols on the board
            newSymbol = input("What new symbol do you want?")
            while newSymbol != "#" and newSymbol != "*" and newSymbol != "$":
                print("You can only select #, $ or * as one of the new symbols.")
                newSymbol = input("What new symbol do you want?")
            
            if newSymbol == board[row][column]:
                print("That location already has that symbol!")
                print("Nothing changed, no points lost.")
                print("Score: " + str(currentScore))

            elif newSymbol != board[row][column]:
                board[row][column] = newSymbol
                currentScore -= 2
                oldScore = currentScore
                print("You've successfully changed a symbol, but lost 2 points.")
                print("Score: " + str(currentScore))

        print()
        print_board(board)

        #Checks if the board has been cleared.
        #If it's cleared then award the user 10
        #points and break out of the loop to
        #end the game
        boardClear = is_board_finished(board)
        if boardClear == True:
            currentScore += 10
            break

        command = gameplay_decision()
    
    #Depending on if the board is cleared or
    #or not, the user will get a different end result
    if boardClear == True:
        print("Good Job! You finished the Board!")
        print("You got 10 more points!")
        print("Your final score is " + str(currentScore))
    
    else:
        print("The board isn't finished yet! Maybe next time.")
        print("Your final score is " + str(currentScore))

# -----------------------------------------------

#----------------- Do not change --------------------#
''' Ensures that the main() function is called
    when matcher.py is executed as a stand-alone program'''
# ----------------------------------------------------
if __name__ == "__main__":
    main()
